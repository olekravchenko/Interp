{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12760\viewh17780\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qc

\f0\fs24 \cf0 \

\f1\b Block tridiagonal matrices\
\
John D'Errico\
woodchips@rochester.rr.com
\f0\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qj
\cf0 \
I won't go so far here as to suggest uses for block tridiagonal matrices. Since I've rarely needed them myself, this would be presumptive.\
\
I'll only make a comment on how they are efficiently built. The trick is a careful use of sparse. If you look inside blktridiag, you will see only a single call to sparse that builds the final array. Prior to that call, I only need to specify the locations in the array to place those elements. Its all just really a call to ndgrid, then some carefully reshaped arrays, then the call to sparse.\
\
Enjoy...\
John\
}